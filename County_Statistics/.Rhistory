876817-673,740
876817-673740
178350-61298
725938-725580
17.03-5.85
108798/151331
round((108798/151331)*100, 2)
round((725744/976475)*100, 2)
round((42533/151331)*100, 2)
round((250730/976475)*100, 2)
setwd("C:/Users/Chels/OneDrive - University of Illinois - Urbana/Illinois Wetlands Risk Assessment/Results")
library(ggplot2)
library(reshape2)
library(patchwork)
library(dplyr)
################################################################################
# calculate and plot area of wetlands that could be non-jurisdictional based on
# levee, water regime, and stream permanence criteria
## read in table
ws.df = read.csv("IL_WS_Step11_AreaThreshold_Intersect_Table.csv")
# water regimes
water.reg.order = c("Permanently Flooded","Intermittently Exposed","Semipermanently Flooded",
"Seasonally Flooded/Saturated","Seasonally Flooded","Seasonally Saturated",
"Temporary Flooded","Intermittently Flooded")
n.w = length(water.reg.order)
# levee contraints
levee = c("None","Contains")
n.l = length(levee)
# stream permanence criteria
stream.perms = c("Perennial","Intermittent","Ephemeral")
perm.abvs = c("1","2","3")
n.p = length(perm.abvs)
# buffer scenarios
buf.dists = c("1","10","20","100")
buf.cols = paste("buf",buf.dists,sep="")
n.b = length(buf.dists)
# create data frame with areas in each category
area.df = data.frame(matrix(nrow=n.w*n.p*n.b, ncol=11))
colnames(area.df) = c("water_cutoff","stream_perm","buf_dist","area",
"leveed_only","non_intersect_only","below_flood_only",
"leveed_and_non_intersect","leveed_and_below_flood",
"non_intersect_and_below_flood",
"leveed_non_intersect_below_flood")
# removed exacavated
ws.df = ws.df[-which(ws.df$FIRST_MODI == "Excavated"),]
sum(ws.df$Area_Acres)
sum(ws.df$Shape_Area/(10^4))
n = 1
for (j in 1:n.w) {
for (k in 1:n.p) {
for (b in 1:n.b) {
area.df[n,"water_cutoff"] = water.reg.order[j]
area.df[n,"stream_perm"] = stream.perms[k]
area.df[n,"buf_dist"] = buf.dists[b]
buf.ws.col = paste("Waters_Intersect", perm.abvs[k], buf.dists[b], sep="_")
wrs = water.reg.order[1:j]
wrs.inds = !(ws.df$WATER_REGI %in% wrs)
area.df[n,"area"] = sum(ws.df[which(wrs.inds | (ws.df$Levee_Contain == 1 | ws.df[,buf.ws.col] == 0)),"Area_Acres"])
area.df[n,"leveed_only"] = sum(ws.df[which(!wrs.inds & (ws.df$Levee_Contain == 1 & ws.df[,buf.ws.col] == 1)),"Area_Acres"])
area.df[n,"non_intersect_only"] = sum(ws.df[which(!wrs.inds & (ws.df$Levee_Contain == 0 & ws.df[,buf.ws.col] == 0)),"Area_Acres"])
area.df[n,"leveed_and_non_intersect"] = sum(ws.df[which(!wrs.inds & (ws.df$Levee_Contain == 1 & ws.df[,buf.ws.col] == 0)),"Area_Acres"])
area.df[n,"below_flood_only"] = sum(ws.df[which(wrs.inds & (ws.df$Levee_Contain == 0 & ws.df[,buf.ws.col] == 1)),"Area_Acres"])
area.df[n,"leveed_and_below_flood"] = sum(ws.df[which(wrs.inds & (ws.df$Levee_Contain == 1 & ws.df[,buf.ws.col] == 1)),"Area_Acres"])
area.df[n,"non_intersect_and_below_flood"] = sum(ws.df[which(wrs.inds & (ws.df$Levee_Contain == 0 & ws.df[,buf.ws.col] == 0)),"Area_Acres"])
area.df[n,"leveed_non_intersect_below_flood"] = sum(ws.df[which(wrs.inds & (ws.df$Levee_Contain == 1 & ws.df[,buf.ws.col] == 0)),"Area_Acres"])
n = n + 1
}
}
}
area.df$area - area.df$leveed_only - area.df$non_intersect_only - area.df$below_flood_only - area.df$leveed_and_non_intersect - area.df$leveed_and_below_flood - area.df$non_intersect_and_below_flood - area.df$leveed_non_intersect_below_flood
# calculate minimum, mean, and maximum for each water regime
area.stats.df = area.df %>%
group_by(water_cutoff) %>%
summarize(mean = mean(area),
min = min(area),
max = max(area))
area.stats.df$group = "This study"
perc.stats.df = area.stats.df
perc.stats.df[,c("min","mean","max")] = area.stats.df[,c("min","mean","max")]/sum(ws.df[,"Area_Acres"])*100
# Gold (2024) dataframe
gold.abs.df = data.frame(matrix(nrow=8, ncol=0))
gold.abs.df$water_cutoff = rev(water.reg.order)
gold.abs.df$mean = c(93739.42,93739.42,715750.99,718687.71,950582.62,950582.62,988085.60,988341.54)
gold.abs.df$min = c(89581.64,89581.64,714155.40,717092.13,950082.83,950082.83,988085.60,988341.54)
gold.abs.df$max = c(184338.7,184338.7,756758.6,759129.6,958241.7,958241.7,988181.5,988372.5)
# Precise values for seasonally flooded: 718688 (717092-759130)
gold.abs.df$group = "Gold (2024)"
area.stats.df = rbind(area.stats.df, gold.abs.df)
gold.perc.df = data.frame(matrix(nrow=8, ncol=0))
gold.perc.df$water_cutoff = rev(water.reg.order)
gold.perc.df$mean = c(9.479862,9.479862,72.383854,72.680845,96.132363,96.132363,99.925037,99.950920)
gold.perc.df$min = c(9.059386,9.059386,72.222493,72.519484,96.081819,96.081819,99.925037,99.950920)
gold.perc.df$max = c(18.64217,18.64217,76.53096,76.77073,96.90693,96.90693,99.93474,99.95405)
# Precise values for seasonally flooded: 72.68 (72.52-76.77)
gold.perc.df$group = "Gold (2024)"
perc.stats.df = rbind(perc.stats.df, gold.perc.df)
# Simmons et al. (2024) dataframes
sim.abs.df = data.frame(matrix(nrow=8, ncol=0))
sim.abs.df$water_cutoff = rev(water.reg.order)
sim.abs.df$mean = rep(182819, 8)
sim.abs.df$min = rep(140300, 8)
sim.abs.df$max = rep(339425, 8)
sim.abs.df$group = "Simmons et al. (2024)"
area.stats.df = rbind(area.stats.df, sim.abs.df)
sim.perc.df = data.frame(matrix(nrow=8, ncol=0))
sim.perc.df$water_cutoff = rev(water.reg.order)
sim.perc.df$mean = rep(12.65, 8)
sim.perc.df$min = rep(9.70, 8)
sim.perc.df$max = rep(23.48, 8)
sim.perc.df$group = "Simmons et al. (2024)"
perc.stats.df = rbind(perc.stats.df, sim.perc.df)
# plot with range of water cutoff and permanence scenarios
state.area = data.frame(matrix(nrow=1,ncol=0))
state.area$`Total State Wetland Area (ac)` = "test"
state.area$value = 470127 * 2.47105
labels = c("Gold (2024)","Simmons et al. (2024)","This study")
p1 = ggplot(area.stats.df,
aes(x=mean, y=factor(water_cutoff, levels=water.reg.order),
group=factor(group, levels=labels),
color=factor(group, levels=labels))) +
geom_line() +
geom_ribbon(aes(xmin=min, xmax=max,
group=factor(group, levels=labels),
color=factor(group, levels=labels)),
alpha=0.1, size=0) +
labs(y="Wetland Flood Frequency Threshold",x="Wetland Area (acres)") +
scale_color_manual(values=c("deepskyblue2","darkgreen","purple")) +
theme(legend.position="none") +
scale_x_continuous(limits=c(0,1150000), labels=scales::comma)
p2 = ggplot(perc.stats.df,
aes(x=mean, y=factor(water_cutoff, levels=water.reg.order),
group=factor(group, levels=labels),
color=factor(group, levels=labels))) +
geom_line() +
geom_ribbon(aes(xmin=min, xmax=max,
group=factor(group, levels=labels),
color=factor(group, levels=labels)), alpha=0.1) +
labs(y="",x="Percent of State Wetland Area (%)") +
theme(axis.text.y=element_blank()) +
scale_x_continuous(limits=c(0,100), labels=scales::comma)  +
scale_color_manual(values=c("deepskyblue2","darkgreen","purple")) +
guides(color=guide_legend(title="Potential Range of\nFederally Non-Jurisdictional\nWetlands in Illinois"))
p1 + plot_spacer() + p2 + plot_layout(widths = c(4,0.01,4))
area.mean.sort = sort(area.stats.df$mean[which(area.stats.df$group == "This study")], index.return=T)
area.stats.df[area.mean.sort$ix,]
percent.mean.sort = sort(perc.stats.df$mean[which(perc.stats.df$group == "This study")], index.return=TRUE)
round(data.frame(perc.stats.df[percent.mean.sort$ix,c("mean","min","max")]),2)
## plot non-juris area and reason for lack of jurisdiction side by side
area.mean.simple = area.df %>%
group_by(water_cutoff) %>%
summarize(`Behind Levee` = mean(leveed_only + leveed_and_below_flood),
`Non-intersecting` = mean(non_intersect_only + non_intersect_and_below_flood),
`Behind Levee & Non-intersecting` = mean(leveed_and_non_intersect + leveed_non_intersect_below_flood),
`Below Flood Threshold` = mean(below_flood_only))
area.min.simple = area.df %>%
group_by(water_cutoff) %>%
summarize(`Behind Levee` = min(leveed_only + leveed_and_below_flood),
`Non-intersecting` = min(non_intersect_only + non_intersect_and_below_flood),
`Behind Levee & Non-intersecting` = min(leveed_and_non_intersect + leveed_non_intersect_below_flood),
`Below Flood Threshold` = min(below_flood_only))
area.max.simple = area.df %>%
group_by(water_cutoff) %>%
summarize(`Behind Levee` = max(leveed_only + leveed_and_below_flood),
`Non-intersecting` = max(non_intersect_only + non_intersect_and_below_flood),
`Behind Levee & Non-intersecting` = max(leveed_and_non_intersect + leveed_non_intersect_below_flood),
`Below Flood Threshold` = max(below_flood_only))
area.mean.simple$stat = "Mean"
area.min.simple$stat = "Minimum"
area.max.simple$stat = "Maximum"
area.mean.melt = melt(area.mean.simple,
id.variables=c("water_cutoff"),
value.name=c("Mean"),
variable.name=c("Reason"))
area.min.melt = melt(area.min.simple,
id.variables=c("water_cutoff"),
value.name=c("Minimum"),
variable.name=c("Reason"))
area.max.melt = melt(area.max.simple,
id.variables=c("water_cutoff"),
value.name=c("Maximum"),
variable.name=c("Reason"))
area.comb.melt = right_join(area.mean.melt, area.min.melt, by=c("water_cutoff","Reason"))
area.comb.melt = right_join(area.comb.melt, area.max.melt, by=c("water_cutoff","Reason"))
area.melt = melt(area.comb.melt[,c("water_cutoff","Reason","Mean","Minimum","Maximum")])
reason.order = c("Below Flood Threshold","Non-intersecting","Behind Levee",
"Behind Levee & Non-intersecting")
p1 = ggplot(area.stats.df,
aes(x=mean, y=factor(water_cutoff, levels=water.reg.order),
group=factor(group, levels=labels),
color=factor(group, levels=labels))) +
geom_line() +
geom_ribbon(aes(xmin=min, xmax=max,
group=factor(group, levels=labels),
color=factor(group, levels=labels)),
alpha=0.1, size=0) +
labs(y="Wetland Flood Frequency Threshold",x="Wetland Area (acres)") +
scale_x_continuous(limits=c(0,1000000), labels=scales::comma) +
scale_color_manual(values=c("darkgoldenrod","chocolate4","black")) +
guides(color=guide_legend(title="Potential Range of\nFederally Non-Jurisdictional\nWetlands in Illinois")) +
theme(text = element_text(size=12))
p2 = ggplot(area.comb.melt,
aes(x=Mean, y=factor(water_cutoff, levels=water.reg.order),
fill=factor(Reason, levels=reason.order))) +
geom_bar(stat="identity") +
theme(axis.text.y=element_blank()) +
labs(y="",x="Mean Wetland Area (acres)") +
scale_x_continuous(limits=c(0,1000000), labels=scales::comma) +
guides(fill=guide_legend(title="Reason for Loss of\nFederal Jurisdiction")) +
theme(text = element_text(size=12))
p1 + p2
################################################################################
# calculate and plot area of non-jurisdictional wetland in each GAP category
# read in gap intersect table
gap.df = read.csv("IL_WS_Step12_GAP_Union_CntyIntersect_Table.csv")
gap.df$Area_Acres = (gap.df$Shape_Area * 2.47105)/ 10^4
# counties with stormwater ordinances that protect wetlands
pro.cnties = c("Cook","DeKalb","DuPage","Grundy","Kane","McHenry","Lake","Will")
n.cp = length(pro.cnties)
# create column that combines GAP and county information
gap.df$Protected_Status = rep("No protection", nrow(gap.df))
for (i in seq(1,2)) {gap.df$Protected_Status[which(gap.df$GAP_Sts == i)] = "Managed for biodiversity"}
gap.df$Protected_Status[which((gap.df$NAME %in% pro.cnties) & !(gap.df$GAP_Sts %in% c(1,2)))] = "County stormwater ordinance"
gap.df$Protected_Status[which(!(gap.df$NAME %in% pro.cnties) & (gap.df$GAP_Sts == 3))] = "Managed for multiple uses"
gap.df$Protected_Status[which(!(gap.df$NAME %in% pro.cnties) & (gap.df$GAP_Sts == 4))] = "No protection"
# create new column with labels
pro.cats = sort(unique(gap.df$Protected_Status))
n.cats = length(pro.cats)
# remove excavated wetlands
gap.df = gap.df[-which(gap.df$FIRST_MODI == "Excavated"),]
# sum area in each gap category
floodplain = c("no","yes")
gap.area.df = data.frame(matrix(nrow=2*n.cats*n.w*n.p*n.b, ncol=6))
colnames(gap.area.df) = c("gap","floodplain","water_cutoff","stream_perm","buf_dist","area")
n = 1
for (g in 1:n.cats) {
for (i in 1:2) {
gap.df.sub = gap.df[which(gap.df$Protected_Status == pro.cats[g] & gap.df$Floodplain_100yr == (i-1)),]
for (j in 1:n.w) {
for (k in 1:n.p) {
for (b in 1:n.b) {
gap.area.df[n,"gap"] = pro.cats[g]
gap.area.df[n,"floodplain"] = floodplain[i]
gap.area.df[n,"water_cutoff"] = water.reg.order[j]
gap.area.df[n,"stream_perm"] = stream.perms[k]
gap.area.df[n,"buf_dist"] = buf.dists[b]
buf.ws.col = paste("Waters_Intersect", perm.abvs[k], buf.dists[b], sep="_")
wrs = water.reg.order[1:j]
wrs.inds = !(gap.df.sub$WATER_REGI %in% wrs)
gap.area.df[n,"area"] = sum(gap.df.sub[which(wrs.inds | (gap.df.sub$Levee_Contain == 1 | gap.df.sub[,buf.ws.col] == 0)),"Area_Acres"])
n = n + 1
}
}
}
}
}
# calculate minimum, mean, and maximum for each water regime
gap.total.df = gap.area.df %>%
group_by(gap, water_cutoff, stream_perm, buf_dist) %>%
summarize(area = sum(area))
gap.stats.df = gap.total.df %>%
group_by(gap, water_cutoff) %>%
summarize(mean = mean(area),
min = min(area),
max = max(area))
gap.percent.df = gap.stats.df
gap.percent.df[,c("mean","min","max")] = gap.stats.df[,c("mean","min","max")]/sum(gap.df[,"Area_Acres"])*100
# plot area in each gap category
pro.order = c("No protection","Managed for multiple uses",
"County stormwater ordinance","Managed for biodiversity")
p1 = ggplot(gap.stats.df,
aes(x=mean, y=factor(water_cutoff, levels=water.reg.order),
fill=factor(gap, levels=pro.order))) +
geom_bar(stat="identity",position="stack") +
labs(y="Wetland Flood Frequency Threshold",
x="Mean Wetland Area (acres)") +
scale_x_continuous(limits=c(0,1150000), labels=scales::comma) +
theme(legend.position="none")
p2 = ggplot(gap.percent.df,
aes(x=mean, y=factor(water_cutoff, levels=water.reg.order),
fill=factor(gap, levels=pro.order))) +
geom_bar(stat="identity",position="stack") +
labs(y="",x="Mean Percent of\nState Wetland Area (%)") +
scale_x_continuous(limits=c(0,100), labels=scales::comma) +
theme(axis.text.y=element_blank(),legend.spacing.y = unit(0.1,'cm')) +
guides(fill = guide_legend(byrow = TRUE,title="Protection Status"))
p1 + plot_spacer() + p2 + plot_layout(widths = c(4,0.2,4))
# estimate area with no protection or GAP status of 4
np.total.df = gap.total.df[which(gap.total.df$gap == "No protection"),]
np.stats.df = np.total.df %>%
group_by(water_cutoff) %>%
summarize(mean = mean(area),
min = min(area),
max = max(area))
np.percent.df = np.stats.df
np.percent.df[,c("mean","min","max")] = np.stats.df[,c("mean","min","max")]/sum(gap.df[,"Area_Acres"])*100
np.area.sort = sort(np.stats.df$mean, index.return=TRUE)
np.stats.df[np.area.sort$ix,]
np.percent.sort = sort(np.percent.df$mean, index.return=TRUE)
np.percent.df[np.percent.sort$ix,]
round(data.frame(np.percent.df[np.percent.sort$ix,c("mean","min","max")]),2)
# compare vulnerable waters with those that lack protection
area.stats.sub = area.stats.df[which(area.stats.df$group == "This study"),]
area.stats.sub$group = "Potential Range of\nFederally Non-Jurisdictional\nWetlands"
np.stats.df$group = "Potential Range of\nWetlands with No Alternative Protection"
combined.stats.df = rbind(area.stats.sub, np.stats.df)
perc.stats.sub = perc.stats.df[which(perc.stats.df$group == "This study"),]
perc.stats.sub$group = "Potential Range of\nFederally Non-Jurisdictional\nWetlands"
np.percent.df$group = "Potential Range of\nWetlands without\nAlternative Protection"
combined.percent.df = rbind(perc.stats.sub, np.percent.df)
p1 = ggplot(combined.stats.df,
aes(x=mean, y=factor(water_cutoff, levels=water.reg.order), group=group, color=group)) +
geom_line() +
geom_ribbon(aes(xmin=min, xmax=max, group=group, color=group, fill=group), alpha=0.2) +
#geom_vline(data=gold.abs.df, aes(xintercept=value, linetype=`Gold (2024) - Seasonally Flooded`),
#           size=0.5, color="black") +
labs(y="Wetland Flood Frequency Threshold",x="Wetland Area (acres)") +
theme(legend.position="none") +
scale_x_continuous(limits=c(0,1150000), labels=scales::comma)
p2 = ggplot(combined.percent.df,
aes(x=mean, y=factor(water_cutoff, levels=water.reg.order), group=group, color=group)) +
geom_line() +
geom_ribbon(aes(xmin=min, xmax=max, group=group, color=group, fill=group), alpha=0.2) +
#geom_vline(data=gold.perc.df, aes(xintercept=value, linetype=`Gold (2024) - Seasonally Flooded`),
#           size=0.5, color="black") +
labs(y="",x="Percent of Total Wetland Area (%)") +
theme(axis.text.y=element_blank(),legend.spacing.y = unit(0.2,'cm')) +
scale_x_continuous(limits=c(0,100), labels=scales::comma) +
guides(color = guide_legend(byrow = TRUE,title=""), group="none", fill="none")
p1 + plot_spacer() + p2 + plot_layout(widths = c(4,0.1,4))
# estimate differences between vulernable and protected wetlands
round(area.stats.df[area.mean.sort$ix,c("mean","min","max")] - np.stats.df[np.area.sort$ix,c("mean","min","max")])
round(perc.stats.df[percent.mean.sort$ix,c("mean","min","max")] - np.percent.df[np.percent.sort$ix,c("mean","min","max")],2)
# estimate area in each protection category
bio.df = gap.stats.df[which(gap.stats.df$gap == "Managed for biodiversity"),]
bio.sort = sort(bio.df$mean, index.return=T)
bio.df[bio.sort$ix,]
cnty.df = gap.stats.df[which(gap.stats.df$gap == "County stormwater ordinance"),]
cnty.sort = sort(cnty.df$mean, index.return=T)
cnty.df[cnty.sort$ix,]
mult.df = gap.stats.df[which(gap.stats.df$gap == "Managed for multiple uses"),]
mult.sort = sort(mult.df$mean, index.return=T)
mult.df[mult.sort$ix,]
forest.df = type.area.sum[which(type.area.sum$type == "Freshwater Forested/Shrub Wetland"),]
gap.df = gap.df[-which(gap.df$WETLAND_TYPE == ""),]
wetland.types = sort(unique(gap.df$WETLAND_TYPE))
n.t = length(wetland.types)
# add unprotected column
gap.df$Not_Protected = 1*(gap.df$Protected_Status == "No protection")
# estimate unprotected nonjurisdictional area in each type by water regime
type.area.df = data.frame(matrix(nrow=n.t*n.w*n.p*n.b, ncol=5))
colnames(type.area.df) = c("type","water_cutoff","stream_perm","buf_dist","area")
n = 1
for (i in 1:n.t) {
df.sub = gap.df[which(gap.df$WETLAND_TYPE == wetland.types[i]),]
for (j in 1:n.w) {
for (k in 1:n.p) {
for (b in 1:n.b) {
type.area.df[n,"type"] = wetland.types[i]
type.area.df[n,"water_cutoff"] = water.reg.order[j]
type.area.df[n,"stream_perm"] = stream.perms[k]
type.area.df[n,"buf_dist"] = buf.dists[b]
buf.ws.col = paste("Waters_Intersect", perm.abvs[k], buf.dists[b], sep="_")
wrs = water.reg.order[1:j]
wrs.inds = !(df.sub$WATER_REGI %in% wrs)
non.jurisdictional.inds = 1*(wrs.inds | (df.sub$Levee_Contain == 1 | df.sub[,buf.ws.col] == 0))
non.protected.inds = df.sub$Not_Protected
type.area.df[n,"area"] = sum(df.sub[which(non.jurisdictional.inds == 1 & non.protected.inds == 1),"Area_Acres"])
n = n + 1
}
}
}
}
# summary statistics by wetland type
type.area.sum = type.area.df %>%
group_by(type, water_cutoff) %>%
summarize(mean = mean(area),
min = min(area),
max = max(area))
forest.df = type.area.sum[which(type.area.sum$type == "Freshwater Forested/Shrub Wetland"),]
forest.sort = sort(forest.df$mean, index.return=T)
forest.df[forest.sort$ix,]
emerg.df = type.area.sum[which(type.area.sum$type == "Freshwater Emergent Wetland"),]
emerg.sort = sort(emerg.df$mean, index.return=T)
emerg.df[emerg.sort$ix,]
pond.df = type.area.sum[which(type.area.sum$type == "Freshwater Pond"),]
pond.sort = sort(pond.df$mean, index.return=T)
pond.df[pond.sort$ix,]
setwd('C:/Users/Chels/OneDrive - University of Illinois - Urbana/Illinois Wetlands Risk Assessment/Wetland Mapping/County Summary Statistics for Maps')
library(dplyr)
library(tidyr)
library(ggplot2)
# read in wetland table
ws.df = read.csv("IL_WS_Step12_GAP_Union_CntyIntersect_Table.csv")
ws.df$Area_Acres = (ws.df$Shape_Area * 2.47105)/ 10^4
sum(ws.df$Area_Acres)
# water regimes
water.reg.order = c("Permanently Flooded","Intermittently Exposed","Semipermanently Flooded",
"Seasonally Flooded/Saturated","Seasonally Flooded","Seasonally Saturated",
"Temporary Flooded","Intermittently Flooded")
n.w = length(water.reg.order)
# number of jurisdictional waters and buffer scenarios
buf.dists = c(1,10,20,100)
n.b = length(buf.dists)
waters = seq(1,3)
n.p = length(waters)
# all counties
all.counties = sort(unique(ws.df$NAME))
n.c = length(all.counties)
# counties with protection
pro.cnties = c("Cook","DeKalb","DuPage","Grundy","Kane","McHenry","Lake","Will")
n.cp = length(pro.cnties)
# created new protected status column
ws.df$Protected_Status = rep("No protection", nrow(ws.df))
for (i in seq(1,2)) {ws.df$Protected_Status[which(ws.df$GAP_Sts == i)] = "Managed for biodiversity"}
ws.df$Protected_Status[which((ws.df$NAME %in% pro.cnties) & !(ws.df$GAP_Sts %in% c(1,2)))] = "County stormwater ordinance"
ws.df$Protected_Status[which(!(ws.df$NAME %in% pro.cnties) & (ws.df$GAP_Sts == 3))] = "Managed for multiple uses"
ws.df$Protected_Status[which(!(ws.df$NAME %in% pro.cnties) & (ws.df$GAP_Sts == 4))] = "No protection"
# protected status categories
pro.cats = sort(unique(ws.df$Protected_Status))
n.cats = length(pro.cats)
# create column based on protection status
ws.df$Not_Protected = 1 * (ws.df$Protected_Status == "No protection")
sum(ws.df$Area_Acres*ws.df$Not_Protected)
# sum unprotected nonjurisdictional area by county and water cutoff
stats.df.order = data.frame(matrix(nrow=n.c*n.w*n.p*n.b, ncol=5))
colnames(stats.df.order) = c("county","water_cutoff","stream_perm","buf_dist","area")
n = 1
for (i in 1:n.c) {
cnty.df.sub = ws.df[which(ws.df$NAME == all.counties[i]),]
for (j in 1:n.w) {
for (k in 1:n.p) {
for (b in 1:n.b) {
stats.df.order[n,"county"] = all.counties[i]
stats.df.order[n,"water_cutoff"] = water.reg.order[j]
stats.df.order[n,"stream_perm"] = waters[k]
stats.df.order[n,"buf_dist"] = buf.dists[b]
buf.ws.col = paste("Waters_Intersect", waters[k], buf.dists[b], sep="_")
wrs = water.reg.order[1:j]
wrs.inds = !(cnty.df.sub$WATER_REGI %in% wrs)
non.jurisdictional.inds = (wrs.inds | (cnty.df.sub$Levee_Contain == 1 | cnty.df.sub[,buf.ws.col] == 0))
non.protected.inds = cnty.df.sub$Not_Protected
stats.df.order[n,"area"] = sum(cnty.df.sub[which(non.jurisdictional.inds == 1 & non.protected.inds == 1),"Area_Acres"])
n = n + 1
}
}
}
}
# calculate mean, min, and max areas across scenarios for each county and water regime
area.stats.sum = stats.df.order %>%
group_by(county, water_cutoff) %>%
summarize(Mean = mean(area),
Min = min(area),
Max = max(area))
# reshape to get areas for each county in the columns
wr.abrevs = c("PF","IE","SPF","SFS","SF","SS","TF","IF")
for (i in 1:n.w) { area.stats.sum$water_cutoff[area.stats.sum$water_cutoff == water.reg.order[i]] = wr.abrevs[i] }
wide.df = data.frame(matrix(nrow=n.c,ncol=0))
wide.df$county = all.counties
for (i in 1:n.w) {
wr.rows = area.stats.sum[area.stats.sum$water_cutoff == wr.abrevs[i],]
colnames(wr.rows)[3:5] = paste(colnames(wr.rows)[3:5],wr.abrevs[i],sep="_")
wide.df = cbind(wide.df, wr.rows[,colnames(wr.rows)[3:5]])
}
# add column for sensitivity
wide.df$area_sensitivity = (wide.df$Mean_PF - wide.df$Mean_IF)/(wide.df$Mean_SS)
wide.df$area_sensitivity[is.na(wide.df$area_sensitivity)] = 0
# write file
write.csv(wide.df, "IL_WS_Step13_CountyDissolve_Stats.csv")
# plot mean area v. sensitivity
ggplot(wide.df) +
geom_point(aes(x=log(Mean_SPF), y=area_sensitivity))
# plot area without protection based on wetland type
ws.df = ws.df[-which(ws.df$WETLAND_TYPE == ""),]
wetland.types = sort(unique(ws.df$WETLAND_TYPE))
n.t = length(wetland.types)
# sum unprotected nonjurisdictional area by county and water cutoff
cnty.type.df = data.frame(matrix(nrow=n.c*n.t*n.w*n.p*n.b, ncol=6))
colnames(cnty.type.df) = c("county","wetland_type","water_cutoff","stream_perm","buf_dist","area")
n = 1
for (i in 1:n.c) {
for (t in 1:n.t) {
df.sub = ws.df[which(ws.df$NAME == all.counties[i] & ws.df$WETLAND_TYPE == wetland.types[t]),]
for (j in 1:n.w) {
for (k in 1:n.p) {
for (b in 1:n.b) {
cnty.type.df[n,"county"] = all.counties[i]
cnty.type.df[n,"wetland_type"] = wetland.types[t]
cnty.type.df[n,"water_cutoff"] = water.reg.order[j]
cnty.type.df[n,"stream_perm"] = waters[k]
cnty.type.df[n,"buf_dist"] = buf.dists[b]
buf.ws.col = paste("Waters_Intersect", waters[k], buf.dists[b], sep="_")
wrs = water.reg.order[1:j]
wrs.inds = !(df.sub$WATER_REGI %in% wrs)
non.jurisdictional.inds = (wrs.inds | (df.sub$Levee_Contain == 1 | df.sub[,buf.ws.col] == 0))
non.protected.inds = df.sub$Not_Protected
cnty.type.df[n,"area"] = sum(df.sub[which(non.jurisdictional.inds == 1 & non.protected.inds == 1),"Area_Acres"])
n = n + 1
}
}
}
}
}
# calculate mean, min, and max areas across scenarios for each county and water regime
cnty.type.sum = cnty.type.df %>%
group_by(county, wetland_type, water_cutoff) %>%
summarize(Mean_Area = mean(area),
Min_Area = min(area),
Max_Area = max(area))
# write file
write.csv(cnty.type.sum[,c("county","wetland_type","water_cutoff","Mean_Area","Min_Area","Max_Area")],
"IL_WS_Step13_CountyDissolve_Type_Stats.csv")
View(wide.df)
