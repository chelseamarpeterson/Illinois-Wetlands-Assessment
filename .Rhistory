length(unique(area.df$CJEST_ID))*8
# join area and cj df
colnames(cj.df)[which(colnames(cj.df) == "Area_Ha")] = "Tract_Ha"
area.cj.df = left_join(cj.df, area.df, by=c("CJEST_ID","GEOID10"))
# make index for water regime, climate indicator, and flood indicator
area.cj.df$wid = as.integer(factor(area.cj.df$water_cutoff))
area.cj.df$fid = as.integer(factor(area.cj.df$FLD_ET))
area.cj.df$cid = as.integer(factor(area.cj.df$N_CLT_EOMI))
# additional indices for explaining climat indicator results
area.cj.df$pid = as.integer(factor(area.cj.df$EPL_ET)) # expected population loss
area.cj.df$aid = as.integer(factor(area.cj.df$EAL_ET)) # expected agricultural loss
area.cj.df$bid = as.integer(factor(area.cj.df$EBL_ET)) # expected building loss
area.cj.df$wfid = as.integer(factor(area.cj.df$WFR_ET)) # wildfire risk
# normalize wetland areas by census tract areas
area.cj.df$Tract_Normalized_Wetland_Area = area.cj.df$mean_area/area.cj.df$Tract_Ha
# normalize relative areas by global mean
Mean_Tract_Normalized_Wetland_Area = mean(area.cj.df$Tract_Normalized_Wetland_Area)
area.cj.df$Mean_Normalized_Wetland_Area = area.cj.df$Tract_Normalized_Wetland_Area/Mean_Tract_Normalized_Wetland_Area
# visualize distributions
hist(area.cj.df$mean_area)
hist(area.cj.df$Tract_Normalized_Wetland_Area)
hist(area.cj.df$Mean_Normalized_Wetland_Area)
# add indicator for occurrence in a protected county
pro.cnties = paste(c("Cook","DeKalb","DuPage","Grundy","Kane","McHenry","Lake","Will"),"County",sep=" ")
area.cj.df$cntyid = (area.cj.df$CF %in% pro.cnties) + 1
################################################################################
# CEJST Analysis 1: fit Bayesian distributions to each indicator group
# create new data frames for tracts outside counties with protections
area.cj.df1 = area.cj.df[which(area.cj.df$cntyid==1),]
hist(area.cj.df1$mean_area)
hist(area.cj.df1$Tract_Normalized_Wetland_Area)
hist(area.cj.df1$Mean_Normalized_Wetland_Area)
# put normalized areas and indicators into list
area.list.all = list(area_norm = as.vector(area.cj.df$Mean_Normalized_Wetland_Area),
wid = area.cj.df$wid,
fid = area.cj.df$fid,
cid = area.cj.df$cid,
pid = area.cj.df$pid,
aid = area.cj.df$aid,
bid = area.cj.df$bid,
wfid = area.cj.df$wfid)
area.list.unprotected = list(area_norm = as.vector(area.cj.df1$Mean_Normalized_Wetland_Area),
wid = area.cj.df1$wid,
fid = area.cj.df1$fid,
cid = area.cj.df1$cid,
pid = area.cj.df1$pid,
aid = area.cj.df1$aid,
bid = area.cj.df1$bid,
wfid = area.cj.df1$wfid)
area.lists = list()
area.lists[["all"]] = area.list.all
area.lists[["unprotected"]] = area.list.unprotected
groups = c("all","unprotected")
n.g = length(groups)
set.seed(314)
m.list = list()
indicators = c("f","c","a","b","p","w")
n.v = length(indicators)
for (i in 1:n.v) { m.list[[indicators[i]]] = list() }
i = 2
# get list for group of census tracts
grp = groups[i]
grp.area.list = area.lists[[grp]]
m.list[["w"]][[grp]] = m.w
# wildfire risk
m.w = ulam(alist(area_norm ~ normal(mu, sigma),
log(mu) <- a[wid,wfid],
matrix[wid,wfid]: a ~ dnorm(0,1),
sigma ~ dexp(1)),
data=grp.area.list, chains=5, log_lik=T)
m.list[["w"]][[grp]] = m.w
# put models into list
ind.abrvs = c("Flood","Climate","Ag","Building","Population","Wildfire")
grp.abrvs = c("All", "Unprotected")
i = 6
v.i = indicators[i]
v.i
j = 2
g.j = groups[j]
# get info for ith model
model.ij = m.list[[v.i]][[g.j]]
# re-scale posterior estimates
exp.a.ij = exp(extract.samples(model.ij)$a)*Mean_Tract_Normalized_Wetland_Area
# calculate posterior difference and melt dataframe
diff.ij = exp.a.ij[,,2] - exp.a.ij[,,1]
extract.samples(model.ij)
extract.samples(model.ij)$a
path_to_nwi_data = "C:/Users/Chels/OneDrive - University of Illinois - Urbana/Illinois Wetlands Risk Assessment/Results/NWI_Data"
path_to_cejst = "C:/Users/Chels/OneDrive - University of Illinois - Urbana/Illinois Wetlands Risk Assessment/Databases/CEJST"
path_to_gitrepo = "C:/Users/Chels/OneDrive - University of Illinois - Urbana/Illinois Wetlands Risk Assessment/Public-Repo"
library(ggplot2)
library(reshape2)
library(dplyr)
library(rethinking)
################################################################################
# combine cejst data and unprotected wetland data for illinois
# read in CEJST data
setwd(path_to_cejst)
cj.df = read.csv("IL_CJEST_Data.csv")
# read in wetland area data
setwd(path_to_nwi_data)
area.df = read.csv("IL_WS_Step16_CJEST_Unprotected_Area.csv")
# water regimes
water.regimes = c("Permanently Flooded","Intermittently Exposed","Semipermanently Flooded",
"Seasonally Flooded/Saturated","Seasonally Flooded","Seasonally Saturated",
"Temporary Flooded","Intermittently Flooded")
water.reg.labels = c("Permanently Flooded","Intermittently Exposed","Semipermanently Flooded",
"Seasonally Flooded/Saturated","Seasonally Flooded","Seasonally Saturated",
"Temporarily Flooded","Intermittently Flooded")
n.w = length(water.regimes)
# add zeros to cejst polygons without area data
cjest.ids = sort(unique(cj.df$CJEST_ID))
n.cj = length(cjest.ids)
for (i in 1:n.cj) {
cj.id = cjest.ids[i]
geo.id = cj.df$GEOID10[which(cj.df$CJEST_ID == cj.id)]
if (!(cj.id %in% area.df$CJEST_ID)) {
new.df = data.frame(matrix(nrow=n.w, ncol=6))
colnames(new.df) = colnames(area.df)
new.df$GEOID10 = geo.id
new.df$CJEST_ID = cj.id
new.df$water_cutoff = water.regimes
new.df$mean_area = rep(0,n.w)
new.df$min_area = rep(0,n.w)
new.df$max_area = rep(0,n.w)
area.df = rbind(area.df, new.df)
}
}
length(unique(area.df$CJEST_ID))*8
# join area and cj df
colnames(cj.df)[which(colnames(cj.df) == "Area_Ha")] = "Tract_Ha"
area.cj.df = left_join(cj.df, area.df, by=c("CJEST_ID","GEOID10"))
# make index for water regime, climate indicator, and flood indicator
area.cj.df$wid = as.integer(factor(area.cj.df$water_cutoff))
area.cj.df$fid = as.integer(factor(area.cj.df$FLD_ET))
area.cj.df$cid = as.integer(factor(area.cj.df$N_CLT_EOMI))
# additional indices for explaining climat indicator results
area.cj.df$pid = as.integer(factor(area.cj.df$EPL_ET)) # expected population loss
area.cj.df$aid = as.integer(factor(area.cj.df$EAL_ET)) # expected agricultural loss
area.cj.df$bid = as.integer(factor(area.cj.df$EBL_ET)) # expected building loss
area.cj.df$wfid = as.integer(factor(area.cj.df$WFR_ET)) # wildfire risk
# normalize wetland areas by census tract areas
area.cj.df$Tract_Normalized_Wetland_Area = area.cj.df$mean_area/area.cj.df$Tract_Ha
# normalize relative areas by global mean
Mean_Tract_Normalized_Wetland_Area = mean(area.cj.df$Tract_Normalized_Wetland_Area)
area.cj.df$Mean_Normalized_Wetland_Area = area.cj.df$Tract_Normalized_Wetland_Area/Mean_Tract_Normalized_Wetland_Area
# visualize distributions
hist(area.cj.df$mean_area)
hist(area.cj.df$Tract_Normalized_Wetland_Area)
hist(area.cj.df$Mean_Normalized_Wetland_Area)
# add indicator for occurrence in a protected county
pro.cnties = paste(c("Cook","DeKalb","DuPage","Grundy","Kane","McHenry","Lake","Will"),"County",sep=" ")
area.cj.df$cntyid = (area.cj.df$CF %in% pro.cnties) + 1
################################################################################
# CEJST Analysis 1: fit Bayesian distributions to each indicator group
# create new data frames for tracts outside counties with protections
area.cj.df1 = area.cj.df[which(area.cj.df$cntyid==1),]
hist(area.cj.df1$mean_area)
hist(area.cj.df1$Tract_Normalized_Wetland_Area)
hist(area.cj.df1$Mean_Normalized_Wetland_Area)
# put normalized areas and indicators into list
area.list.all = list(area_norm = as.vector(area.cj.df$Mean_Normalized_Wetland_Area),
wid = area.cj.df$wid,
fid = area.cj.df$fid,
cid = area.cj.df$cid,
pid = area.cj.df$pid,
aid = area.cj.df$aid,
bid = area.cj.df$bid,
wfid = area.cj.df$wfid)
area.list.unprotected = list(area_norm = as.vector(area.cj.df1$Mean_Normalized_Wetland_Area),
wid = area.cj.df1$wid,
fid = area.cj.df1$fid,
cid = area.cj.df1$cid,
pid = area.cj.df1$pid,
aid = area.cj.df1$aid,
bid = area.cj.df1$bid,
wfid = area.cj.df1$wfid)
area.lists = list()
area.lists[["all"]] = area.list.all
area.lists[["unprotected"]] = area.list.unprotected
groups = c("all","unprotected")
n.g = length(groups)
hist(area.list.unprotected$area_norm[which(area.list.unprotected$wfid==1)])
hist(area.list.unprotected$area_norm[which(area.list.unprotected$wfid==2)])
area.cj.df$WFR_ET
sort(unique(area.cj.df$WFR_ET))
sort(unique(area.cj.df$wfid))
sort(unique(area.cj.df$wfid))
hist(area.list.all$area_norm[which(area.list.all$wfid==1)])
hist(area.list.all$area_norm[which(area.list.all$wfid==2)])
sum(area.list.all$area_norm < 0)
sum(area.list.all$wfid==1)
sum(area.list.all$wfid==2)
sum(area.list.unprotected$wfid==1)
sum(area.list.unprotected$wfid==2)
path_to_nwi_data = "C:/Users/Chels/OneDrive - University of Illinois - Urbana/Illinois Wetlands Risk Assessment/Results/NWI_Data"
path_to_cejst = "C:/Users/Chels/OneDrive - University of Illinois - Urbana/Illinois Wetlands Risk Assessment/Databases/CEJST"
path_to_gitrepo = "C:/Users/Chels/OneDrive - University of Illinois - Urbana/Illinois Wetlands Risk Assessment/Public-Repo"
library(ggplot2)
library(reshape2)
library(dplyr)
library(rethinking)
################################################################################
# combine cejst data and unprotected wetland data for illinois
# read in CEJST data
setwd(path_to_cejst)
cj.df = read.csv("IL_CJEST_Data.csv")
# read in wetland area data
setwd(path_to_nwi_data)
area.df = read.csv("IL_WS_Step16_CJEST_Unprotected_Area.csv")
# water regimes
water.regimes = c("Permanently Flooded","Intermittently Exposed","Semipermanently Flooded",
"Seasonally Flooded/Saturated","Seasonally Flooded","Seasonally Saturated",
"Temporary Flooded","Intermittently Flooded")
water.reg.labels = c("Permanently Flooded","Intermittently Exposed","Semipermanently Flooded",
"Seasonally Flooded/Saturated","Seasonally Flooded","Seasonally Saturated",
"Temporarily Flooded","Intermittently Flooded")
n.w = length(water.regimes)
# add zeros to cejst polygons without area data
cjest.ids = sort(unique(cj.df$CJEST_ID))
n.cj = length(cjest.ids)
for (i in 1:n.cj) {
cj.id = cjest.ids[i]
geo.id = cj.df$GEOID10[which(cj.df$CJEST_ID == cj.id)]
if (!(cj.id %in% area.df$CJEST_ID)) {
new.df = data.frame(matrix(nrow=n.w, ncol=6))
colnames(new.df) = colnames(area.df)
new.df$GEOID10 = geo.id
new.df$CJEST_ID = cj.id
new.df$water_cutoff = water.regimes
new.df$mean_area = rep(0,n.w)
new.df$min_area = rep(0,n.w)
new.df$max_area = rep(0,n.w)
area.df = rbind(area.df, new.df)
}
}
length(unique(area.df$CJEST_ID))*8
# join area and cj df
colnames(cj.df)[which(colnames(cj.df) == "Area_Ha")] = "Tract_Ha"
area.cj.df = left_join(cj.df, area.df, by=c("CJEST_ID","GEOID10"))
# make index for water regime, climate indicator, and flood indicator
area.cj.df$wid = as.integer(factor(area.cj.df$water_cutoff))
area.cj.df$fid = as.integer(factor(area.cj.df$FLD_ET))
area.cj.df$cid = as.integer(factor(area.cj.df$N_CLT_EOMI))
# additional indices for explaining climat indicator results
area.cj.df$pid = as.integer(factor(area.cj.df$EPL_ET)) # expected population loss
area.cj.df$aid = as.integer(factor(area.cj.df$EAL_ET)) # expected agricultural loss
area.cj.df$bid = as.integer(factor(area.cj.df$EBL_ET)) # expected building loss
area.cj.df$wfid = as.integer(factor(area.cj.df$WFR_ET)) # wildfire risk
# normalize wetland areas by census tract areas
area.cj.df$Tract_Normalized_Wetland_Area = area.cj.df$mean_area/area.cj.df$Tract_Ha
# normalize relative areas by global mean
Mean_Tract_Normalized_Wetland_Area = mean(area.cj.df$Tract_Normalized_Wetland_Area)
area.cj.df$Mean_Normalized_Wetland_Area = area.cj.df$Tract_Normalized_Wetland_Area/Mean_Tract_Normalized_Wetland_Area
# visualize distributions
hist(area.cj.df$mean_area)
hist(area.cj.df$Tract_Normalized_Wetland_Area)
hist(area.cj.df$Mean_Normalized_Wetland_Area)
# add indicator for occurrence in a protected county
pro.cnties = paste(c("Cook","DeKalb","DuPage","Grundy","Kane","McHenry","Lake","Will"),"County",sep=" ")
area.cj.df$cntyid = (area.cj.df$CF %in% pro.cnties)
################################################################################
# CEJST Analysis 1: fit Bayesian distributions to each indicator group
# create new data frames for tracts outside counties with protections
area.cj.df1 = area.cj.df[which(area.cj.df$cntyid==0),]
hist(area.cj.df1$mean_area)
hist(area.cj.df1$Tract_Normalized_Wetland_Area)
hist(area.cj.df1$Mean_Normalized_Wetland_Area)
sort(unique(area.cj.df$wfid))
sum(area.list.all$wfid==1)
sum(area.list.all$wfid==2)
sum(area.list.unprotected$wfid==1)
sum(area.list.unprotected$wfid==2)
path_to_gitrepo = "C:/Users/Chels/OneDrive - University of Illinois - Urbana/Illinois Wetlands Risk Assessment/Public-Repo"
setwd(path_to_gitrepo)
library(ggplot2)
library(patchwork)
library(reshape2)
library(rethinking)
# water regimes
water.regimes = c("Permanently Flooded","Intermittently Exposed","Semipermanently Flooded",
"Seasonally Flooded/Saturated","Seasonally Flooded","Seasonally Saturated",
"Temporary Flooded","Intermittently Flooded")
water.reg.labels = c("Permanently Flooded","Intermittently Exposed","Semipermanently Flooded",
"Seasonally Flooded/Saturated","Seasonally Flooded","Seasonally Saturated",
"Temporarily Flooded","Intermittently Flooded")
n.w = length(water.regimes)
################################################################################
## plot results for CEJST analysis 1
# model names
models = c("f","c","a","b","p","w")
n.m = length(models)
ind.labels = c("\u2265 90th percentile\nfor 30-year flood risk",
"At least one climate\nthreshold exceeded",
"\u2265 90th percentile\nfor agricultural loss",
"\u2265 90th percentile\nfor building loss",
"\u2265 90th percentile\nfor population loss",
"\u2265 90th percentile\nfor wildfire risk")
model.labels = c(paste(ind.labels, "\nAll tracts", sep=":"),
paste(ind.labels, "\nTracts in unprotected counties", sep=":"))
indicators = c("f","c","a","b","p","w")
groups = c("all","unprotected")
n.i = length(indicators)
n.g = length(groups)
ind.labels = c("\u2265 90th percentile\nfor 30-year flood risk",
"At least one climate\nthreshold exceeded",
"\u2265 90th percentile\nfor agricultural loss",
"\u2265 90th percentile\nfor building loss",
"\u2265 90th percentile\nfor population loss",
"\u2265 90th percentile\nfor wildfire risk")
group.labels = c("\nAll tracts","\nTracts in unprotected counties")
model.labels = c(paste(ind.labels,group.labels[1],sep=":"),
paste(ind.labels,group.labels[2],sep=":"))
diff.list = list()
melt.list = list()
for (i in 1:n.i) {
for (j in 1:n.j) {
if (i != n.i & j != n.j) {
diff.i = read.csv(paste("CEJST_Analysis/Posteriors/",
paste(paste(ind.abrvs[i],grp.abrvs[j],
"Indicator_PostDiff.csv",sep="_"),sep=""),
sep=",", header=T, check.names=F))
diff.list[[models[i]]] = diff.i
melt.i = melt(diff.i)
melt.i$model = model.labels[i]
melt.list[[models[i]]] = melt.i
}
}
}
diff.list = list()
melt.list = list()
for (i in 1:n.i) {
for (j in 1:n.g) {
if (i != n.i & j != n.g) {
diff.i = read.csv(paste("CEJST_Analysis/Posteriors/",
paste(paste(ind.abrvs[i],grp.abrvs[j],
"Indicator_PostDiff.csv",sep="_"),sep=""),
sep=",", header=T, check.names=F))
diff.list[[models[i]]] = diff.i
melt.i = melt(diff.i)
melt.i$model = model.labels[i]
melt.list[[models[i]]] = melt.i
}
}
}
indicators = c("f","c","a","b","p","w")
groups = c("all","unprotected")
n.i = length(indicators)
n.g = length(groups)
ind.labels = c("\u2265 90th percentile\nfor 30-year flood risk",
"At least one climate\nthreshold exceeded",
"\u2265 90th percentile\nfor agricultural loss",
"\u2265 90th percentile\nfor building loss",
"\u2265 90th percentile\nfor population loss",
"\u2265 90th percentile\nfor wildfire risk")
group.labels = c("\nAll tracts","\nTracts in unprotected counties")
model.labels = c(paste(ind.labels,group.labels[1],sep=":"),
paste(ind.labels,group.labels[2],sep=":"))
ind.abrvs = c("Flood","Climate","Ag","Building","Population","Wildfire")
grp.abrvs = c("All", "Unprotected")
i = 1
j = 1
paste(ind.abrvs[i],grp.abrvs[j],
"Indicator_PostDiff.csv",sep="_")
paste("CEJST_Analysis/Posteriors/",
paste(ind.abrvs[i],grp.abrvs[j],
"Indicator_PostDiff.csv",sep="_"),sep="")
paste("CEJST_Analysis/Posteriors/",
paste(ind.abrvs[i],grp.abrvs[j],
"Indicator_PostDiff.csv",sep="_"),sep="")
diff.list = list()
melt.list = list()
for (i in 1:n.i) {
for (j in 1:n.g) {
if (i != n.i & j != n.g) {
diff.i = read.csv(paste("CEJST_Analysis/Posteriors/",
paste(ind.abrvs[i],grp.abrvs[j],
"Indicator_PostDiff.csv",sep="_"),sep=""),
sep=",", header=T, check.names=F)
diff.list[[models[i]]] = diff.i
melt.i = melt(diff.i)
melt.i$model = model.labels[i]
melt.list[[models[i]]] = melt.i
}
}
}
# plot entire posterior distribution
ggplot(melt.list$f$all,
aes(x=1000*value, fill=model)) +
geom_density() +
facet_wrap(.~factor(variable, levels=water.regimes), ncol=1) +
labs(x="Posterior Mean Area Difference [Wetland ha/1000 Census Tract ha]\n(Indicator True - False)",
y="Density") +
scale_fill_manual(values=c("blue")) +
guides(fill=guide_legend(title="CEJST Indicator"))
melt.list
diff.list = list()
melt.list = list()
for (i in 1:n.i) {
ind.i = indicators[i]
diff.list[[ind.i]] = list()
melt.list[[ind.i]] = list()
for (j in 1:n.g) {
grp.j = groups[j]
if (i != n.i & j != n.g) {
diff.ij = read.csv(paste("CEJST_Analysis/Posteriors/",
paste(ind.abrvs[i],grp.abrvs[j],
"Indicator_PostDiff.csv",sep="_"),sep=""),
sep=",", header=T, check.names=F)
diff.list[[ind.i]][[grp.j]] = diff.ij
melt.ij = melt(diff.ij)
melt.ij$model = paste(ind.labels[i],group.labels[j],sep=":")
melt.list[[ind.i]][[grp.j]] = melt.ij
}
}
}
melt.list["f"]
indicators
n.i
# read in difference distributions
diff.list = list()
melt.list = list()
for (i in 1:n.i) {
ind.i = indicators[i]
diff.list[[ind.i]] = list()
melt.list[[ind.i]] = list()
for (j in 1:n.g) {
grp.j = groups[j]
if (ind.i != "w" & grp.j != "Unprotected") {
diff.ij = read.csv(paste("CEJST_Analysis/Posteriors/",
paste(ind.abrvs[i],grp.abrvs[j],
"Indicator_PostDiff.csv",sep="_"),sep=""),
sep=",", header=T, check.names=F)
diff.list[[ind.i]][[grp.j]] = diff.ij
melt.ij = melt(diff.ij)
melt.ij$model = paste(ind.labels[i],group.labels[j],sep=":")
melt.list[[ind.i]][[grp.j]] = melt.ij
}
}
}
# read in difference distributions
diff.list = list()
melt.list = list()
for (i in 1:n.i) {
ind.i = indicators[i]
diff.list[[ind.i]] = list()
melt.list[[ind.i]] = list()
for (j in 1:n.g) {
grp.j = groups[j]
if (ind.i != "w" && grp.j != "Unprotected") {
diff.ij = read.csv(paste("CEJST_Analysis/Posteriors/",
paste(ind.abrvs[i],grp.abrvs[j],
"Indicator_PostDiff.csv",sep="_"),sep=""),
sep=",", header=T, check.names=F)
diff.list[[ind.i]][[grp.j]] = diff.ij
melt.ij = melt(diff.ij)
melt.ij$model = paste(ind.labels[i],group.labels[j],sep=":")
melt.list[[ind.i]][[grp.j]] = melt.ij
}
}
}
diff.list = list()
melt.list = list()
for (i in 1:n.i) {
ind.i = indicators[i]
diff.list[[ind.i]] = list()
melt.list[[ind.i]] = list()
for (j in 1:n.g) {
grp.j = groups[j]
if (ind.i == "w" & grp.j == "Unprotected") {
next
} else {
diff.ij = read.csv(paste("CEJST_Analysis/Posteriors/",
paste(ind.abrvs[i],grp.abrvs[j],
"Indicator_PostDiff.csv",sep="_"),sep=""),
sep=",", header=T, check.names=F)
diff.list[[ind.i]][[grp.j]] = diff.ij
melt.ij = melt(diff.ij)
melt.ij$model = paste(ind.labels[i],group.labels[j],sep=":")
melt.list[[ind.i]][[grp.j]] = melt.ij
}
}
}
indicators
diff.list = list()
melt.list = list()
for (i in 1:n.i) {
ind.i = indicators[i]
diff.list[[ind.i]] = list()
melt.list[[ind.i]] = list()
if (ind.i != "w") {
diff.ij = read.csv(paste("CEJST_Analysis/Posteriors/",
paste(ind.abrvs[i],grp.abrvs[j],
"Indicator_PostDiff.csv",sep="_"),sep=""),
sep=",", header=T, check.names=F)
diff.list[[ind.i]][[grp.j]] = diff.ij
melt.ij = melt(diff.ij)
melt.ij$model = paste(ind.labels[i],group.labels[j],sep=":")
melt.list[[ind.i]][[grp.j]] = melt.ij
} else {
if (grp.j != "Unprotected") {
diff.ij = read.csv(paste("CEJST_Analysis/Posteriors/",
paste(ind.abrvs[i],grp.abrvs[j],
"Indicator_PostDiff.csv",sep="_"),sep=""),
sep=",", header=T, check.names=F)
diff.list[[ind.i]][[grp.j]] = diff.ij
melt.ij = melt(diff.ij)
melt.ij$model = paste(ind.labels[i],group.labels[j],sep=":")
melt.list[[ind.i]][[grp.j]] = melt.ij
}
}
}
