n = 1
for (g in 1:n.cats) {
gap.df.sub = gap.df[which(gap.df$Protected_Status == pro.cats[g]),]
for (j in 1:n.w) {
for (k in 1:n.p) {
for (b in 1:n.b) {
gap.area.df[n,"gap"] = pro.cats[g]
gap.area.df[n,"water_cutoff"] = water.regimes[j]
gap.area.df[n,"perm_level"] = perm.levels[k]
gap.area.df[n,"buf_dist"] = buf.dists[b]
buf.ws.col = paste("Waters_Intersect", perm.abrvs[k], buf.dists[b], sep="_")
wrs = water.regimes[1:j]
wrs.inds = !(gap.df.sub$WATER_REGI %in% wrs)
gap.area.df[n,"area"] = sum(gap.df.sub[which(wrs.inds | (gap.df.sub$Within_Levee == 1 | gap.df.sub[,buf.ws.col] == 0)),"Area_Ha"])
n = n + 1
}
}
}
}
## step 5: calculate minimum, mean, and maximum for each water regime and gap cateogry
gap.stats.df = gap.area.df %>%
group_by(gap, water_cutoff) %>%
summarize(mean = mean(area),
min = min(area),
max = max(area))
## step 6: estimate area with no protection (Table 2, columns 2-4)
# absolute area
np.stats.df = gap.stats.df[which(gap.stats.df$gap == "No protection"),]
np.area.sort = sort(np.stats.df$mean, index.return=TRUE)
np.stats.df$range = np.stats.df$max - np.stats.df$min
np.stats.df[np.area.sort$ix,]
# area as percentage of state area
np.percent.df = np.stats.df
np.percent.df[,c("mean","min","max")] = np.stats.df[,c("mean","min","max")]/total.state.area.ha*100
np.percent.df$range = np.percent.df$max - np.percent.df$min
np.percent.sort = sort(np.percent.df$mean, index.return=TRUE)
round(data.frame(np.percent.df[np.percent.sort$ix,c("mean","min","max","range")]),2)
# area as percentage of Non-WOTUS area
np.percent.nonCWA = np.stats.df[np.area.sort$ix,c("mean","min","max")]/area.stats.df[np.area.sort$ix,c("mean","min","max")]*100
round(np.percent.nonCWA, 2)
# step 7: estimate differences between vulnerable and protected wetlands (Table 2, columns 5-7)
area.diff.df = area.stats.df[area.mean.sort$ix,c("mean","min","max")] - np.stats.df[np.area.sort$ix,c("mean","min","max")]
perc.diff.df = percent.stats.df[area.mean.sort$ix,c("mean","min","max")] - np.percent.df[np.area.sort$ix,c("mean","min","max")]
perc.noCWA.diff.df = area.diff.df/area.stats.df[area.mean.sort$ix,c("mean","min","max")]*100
round(area.diff.df)
round(perc.diff.df, 2)
round(perc.noCWA.diff.df, 2)
## step 8: estimate area in each protection category (Table A7)
# managed for biodiversity
bio.df = gap.stats.df[which(gap.stats.df$gap == "Managed for biodiversity"),]
bio.sort = sort(bio.df$mean, index.return=T)
bio.df[bio.sort$ix,]
round(bio.df[bio.sort$ix,c("mean","min","max")]/total.state.area.ha*100,2)
# county stormwater ordinance
cnty.df = gap.stats.df[which(gap.stats.df$gap == "County stormwater ordinance"),]
cnty.sort = sort(cnty.df$mean, index.return=T)
cnty.df[cnty.sort$ix,]
round(cnty.df[cnty.sort$ix,c("mean","min","max")]/total.state.area.ha*100,2)
# managed for multiple uses
mult.df = gap.stats.df[which(gap.stats.df$gap == "Managed for multiple uses"),]
mult.sort = sort(mult.df$mean, index.return=T)
mult.df[mult.sort$ix,]
round(mult.df[mult.sort$ix,c("mean","min","max")]/total.state.area.ha*100,2)
bio.df[bio.sort$ix,c("mean","min","max")] + cnty.df[cnty.sort$ix,c("mean","min","max")] + mult.df[mult.sort$ix,c("mean","min","max")]
## step 9: estimate area without protection based on wetland type
# remove singular empty row
gap.df = gap.df[-which(gap.df$WETLAND_TYPE == ""),]
# character vector for types
wetland.types = sort(unique(gap.df$WETLAND_TYPE))
n.t = length(wetland.types)
# add unprotected column
gap.df$Not_Protected = 1*(gap.df$Protected_Status == "No protection")
# estimate unprotected non-WOTUS area in each type by water regime
type.area.df = data.frame(matrix(nrow=n.t*n.w*n.p*n.b, ncol=5))
colnames(type.area.df) = c("type","water_cutoff","perm_level","buf_dist","area")
n = 1
for (i in 1:n.t) {
df.sub = gap.df[which(gap.df$WETLAND_TYPE == wetland.types[i]),]
for (j in 1:n.w) {
for (k in 1:n.p) {
for (b in 1:n.b) {
type.area.df[n,"type"] = wetland.types[i]
type.area.df[n,"water_cutoff"] = water.regimes[j]
type.area.df[n,"perm_level"] = perm.levels[k]
type.area.df[n,"buf_dist"] = buf.dists[b]
buf.ws.col = paste("Waters_Intersect", perm.abrvs[k], buf.dists[b], sep="_")
wrs = water.regimes[1:j]
wrs.inds = !(df.sub$WATER_REGI %in% wrs)
non.jurisdictional.inds = 1*(wrs.inds | (df.sub$Within_Levee == 1 | df.sub[,buf.ws.col] == 0))
non.protected.inds = df.sub$Not_Protected
type.area.df[n,"area"] = sum(df.sub[which(non.jurisdictional.inds == 1 & non.protected.inds == 1),"Area_Ha"])
n = n + 1
}
}
}
}
# summary statistics by wetland type
type.area.sum = type.area.df %>%
group_by(type, water_cutoff) %>%
summarize(mean = mean(area),
min = min(area),
max = max(area))
## step 10: summarize area estimates for Table A8
# forested
forest.df = type.area.sum[which(type.area.sum$type == "Freshwater Forested/Shrub Wetland"),]
forest.sort = sort(forest.df$mean, index.return=T)
forest.df[forest.sort$ix,]
round(forest.df[forest.sort$ix,c("mean","min","max")]/total.state.area.ha*100,2)
# emergent
emerg.df = type.area.sum[which(type.area.sum$type == "Freshwater Emergent Wetland"),]
emerg.sort = sort(emerg.df$mean, index.return=T)
emerg.df[emerg.sort$ix,]
round(emerg.df[emerg.sort$ix,c("mean","min","max")]/total.state.area.ha*100,2)
# ponts
pond.df = type.area.sum[which(type.area.sum$type == "Freshwater Pond"),]
pond.sort = sort(pond.df$mean, index.return=T)
pond.df[pond.sort$ix,]
round(pond.df[pond.sort$ix,c("mean","min","max")]/total.state.area.ha*100,2)
## step 11: gold and simmons unprotected area estimates
setwd(path_to_gitrepo)
# read in gold values
gold.gap.df = read.csv("Area_Estimates/Previous_Studies/Gold_Gap12_Area_Percent.csv")
gold.area.df = gold.gap.df[,c("wr","mean.area","min.area","max.area")]
# read in simmons values
sim.area.df = read.csv("Area_Estimates/Previous_Studies/Simmons_Gap12_Area.csv")
# combine estimates into one dataframe
study.area.df = data.frame(matrix(nrow=2*8, ncol=5))
colnames(study.area.df) = c("water_cutoff","mean","min","max","study")
study.area.df[,"water_cutoff"] = rep(rev(water.regimes), 2)
study.area.df[1:8,"study"] = "Gold (2024)"
study.area.df[9:16,"study"] = "Simmons et al. (2024)"
study.area.df[1,c("mean","min","max")] = gold.area.df[1,c("mean.area","min.area","max.area")]
study.area.df[2:8,c("mean","min","max")] = gold.area.df[,c("mean.area","min.area","max.area")]
study.area.df[9:16,c("mean","min","max")] = sim.area.df
study.area.df$gap = "Managed for biodiversity"
study.area.df[,c("mean","min","max")] = study.area.df[,c("mean","min","max")]/AcPerHa
# step 12: plot area in each gap category and vegetation type
type.lowercase = c("Freshwater emergent wetland","Freshwater forested/shrub wetland","Freshwater pond")
type.order = c("Freshwater forested/shrub wetland","Freshwater emergent wetland","Freshwater pond")
for (i in 1:3) { type.area.sum$type[which(type.area.sum$type == wetland.types[i])] = type.lowercase[i] }
gap.stats.df$water_label = rep(0, nrow(gap.stats.df))
type.area.sum$water_label = rep(0, nrow(type.area.sum))
study.area.df$water_label = rep(0, nrow(study.area.df))
for (i in 1:n.w) { gap.stats.df$water_label[which(gap.stats.df$water_cutoff == water.regimes[i])] = water.reg.labels[i] }
for (i in 1:n.w) { type.area.sum$water_label[which(type.area.sum$water_cutoff == water.regimes[i])] = water.reg.labels[i] }
for (i in 1:n.w) { study.area.df$water_label[which(study.area.df$water_cutoff == water.regimes[i])] = water.reg.labels[i] }
p1 = ggplot(gap.stats.df) +
geom_col_pattern(aes(x=mean,
y=factor(water_label, levels=water.reg.labels),
fill=factor(gap, levels=pro.order),
pattern=factor(gap, levels=pro.order)),
pattern_fill="black",
pattern_density=0.1,
pattern_spacing=0.025) +
labs(y="Wetland Flood Frequency Cutoff",
x="Mean Non-WOTUS Wetland Area (ha)",
fill="gap",pattern="gap") +
scale_x_continuous(limits=c(0,400000), labels=scales::comma) +
guides(shape=guide_legend(title="Previous Estimate of Area \nManaged for Biodiversity"),
fill=guide_legend(title="Protection Level"),
pattern=guide_legend(title="Protection Level")) +
geom_line(data=study.area.df, aes(x=mean,
y=factor(water_label, levels=water.reg.labels),
color=study,
group=study), size=0.5) +
geom_point(data=study.area.df, aes(x=mean,
y=factor(water_label, levels=water.reg.labels),
color=study,
group=study,
shape=study), size=3) +
scale_color_manual(values=c("goldenrod1","darkorange2"),
name="Previous Estimate of Area \nManaged for Biodiversity",
labels=c("Gold (2024)","Simmons et al. (2024)")) +
scale_shape_manual(values=c(16,17),
name="Previous Estimate of Area \nManaged for Biodiversity",
labels=c("Gold (2024)","Simmons et al. (2024)")) +
scale_fill_manual(values=c("darkgray","coral1","darkcyan","darkorchid")) +
scale_pattern_manual(values=c("stripe","none","crosshatch","circle")) +
theme(text = element_text(size=15),
legend.key.size = unit(0.8,'cm'))
p2 = ggplot(type.area.sum) +
geom_col_pattern(aes(x=mean,
y=factor(water_label, levels=water.reg.labels),
fill=factor(type, levels=rev(type.order)),
pattern=factor(type, levels=rev(type.order))),
pattern_fill="black",
pattern_density=0.05,
pattern_spacing=0.025,
pattern_angle=0) +
labs(y="",
x="Mean Unprotected\nNon-WOTUS Wetland Area (ha)") +
scale_x_continuous(limits=c(0,400000), labels=scales::comma) +
theme(axis.text.y=element_blank()) +
guides(fill=guide_legend(title="Wetland Type"),
pattern=guide_legend(title="Wetland Type")) +
scale_fill_manual(values=c("dodgerblue3","darkgreen","burlywood4")) +
scale_pattern_manual(values=c("stripe","none","crosshatch")) +
theme(text = element_text(size=15),
legend.key.size = unit(0.8,'cm'))
p3 = p1 + p2
ggsave("Area_Estimates/Figure2_Unprotected_Plot_Raw.png",
plot = p3, width = 42, height = 14, units="cm")
ggsave("Area_Estimates/Figure2_Unprotected_Plot.jpeg",
plot = p3, width = 42, height = 14, units="cm")
setwd(path_to_nwi_data)
## step 1: read in gap intersect table
gap.df = read.csv("IL_WS_Step12_GAP_Union_CntyIntersect_Table.csv")
# check area totals
sum(gap.df$Shape_Area/10^4); sum(ws.df$Shape_Area/10^4)
sum(gap.df$Area_Ha); sum(ws.df$Area_Ha)
sum(gap.df$Area_Acres/AcPerHa); sum(ws.df$Area_Acres/AcPerHa)
## step 2: specify counties with stormwater ordinances that protect wetlands
pro.cnties = c("Cook","DeKalb","DuPage","Grundy","Kane","McHenry","Lake","Will")
n.cp = length(pro.cnties)
## step 3: create column that combines GAP and county information
gap.df$Protected_Status = rep("Unprotected", nrow(gap.df))
for (i in seq(1,2)) {gap.df$Protected_Status[which(gap.df$GAP_Sts == i)] = "Managed for biodiversity"}
gap.df$Protected_Status[which((gap.df$NAME %in% pro.cnties) & !(gap.df$GAP_Sts %in% c(1,2)))] = "County stormwater ordinance"
gap.df$Protected_Status[which(!(gap.df$NAME %in% pro.cnties) & (gap.df$GAP_Sts == 3))] = "Managed for multiple uses"
gap.df$Protected_Status[which(!(gap.df$NAME %in% pro.cnties) & (gap.df$GAP_Sts == 4))] = "Unprotected"
# create vectors for protection level categories
pro.cats = sort(unique(gap.df$Protected_Status))
n.cats = length(pro.cats)
pro.order = c("Unprotected","Managed for multiple uses","County stormwater ordinance","Managed for biodiversity")
## step 4: sum non-WOTUS area in each gap category
gap.area.df = data.frame(matrix(nrow=n.cats*n.w*n.p*n.b, ncol=5))
colnames(gap.area.df) = c("gap","water_cutoff","perm_level","buf_dist","area")
n = 1
for (g in 1:n.cats) {
gap.df.sub = gap.df[which(gap.df$Protected_Status == pro.cats[g]),]
for (j in 1:n.w) {
for (k in 1:n.p) {
for (b in 1:n.b) {
gap.area.df[n,"gap"] = pro.cats[g]
gap.area.df[n,"water_cutoff"] = water.regimes[j]
gap.area.df[n,"perm_level"] = perm.levels[k]
gap.area.df[n,"buf_dist"] = buf.dists[b]
buf.ws.col = paste("Waters_Intersect", perm.abrvs[k], buf.dists[b], sep="_")
wrs = water.regimes[1:j]
wrs.inds = !(gap.df.sub$WATER_REGI %in% wrs)
gap.area.df[n,"area"] = sum(gap.df.sub[which(wrs.inds | (gap.df.sub$Within_Levee == 1 | gap.df.sub[,buf.ws.col] == 0)),"Area_Ha"])
n = n + 1
}
}
}
}
## step 5: calculate minimum, mean, and maximum for each water regime and gap cateogry
gap.stats.df = gap.area.df %>%
group_by(gap, water_cutoff) %>%
summarize(mean = mean(area),
min = min(area),
max = max(area))
## step 6: estimate area with Unprotected (Table 2, columns 2-4)
# absolute area
np.stats.df = gap.stats.df[which(gap.stats.df$gap == "Unprotected"),]
np.area.sort = sort(np.stats.df$mean, index.return=TRUE)
np.stats.df$range = np.stats.df$max - np.stats.df$min
np.stats.df[np.area.sort$ix,]
# area as percentage of state area
np.percent.df = np.stats.df
np.percent.df[,c("mean","min","max")] = np.stats.df[,c("mean","min","max")]/total.state.area.ha*100
np.percent.df$range = np.percent.df$max - np.percent.df$min
np.percent.sort = sort(np.percent.df$mean, index.return=TRUE)
round(data.frame(np.percent.df[np.percent.sort$ix,c("mean","min","max","range")]),2)
# area as percentage of Non-WOTUS area
np.percent.nonCWA = np.stats.df[np.area.sort$ix,c("mean","min","max")]/area.stats.df[np.area.sort$ix,c("mean","min","max")]*100
round(np.percent.nonCWA, 2)
# step 7: estimate differences between vulnerable and protected wetlands (Table 2, columns 5-7)
area.diff.df = area.stats.df[area.mean.sort$ix,c("mean","min","max")] - np.stats.df[np.area.sort$ix,c("mean","min","max")]
perc.diff.df = percent.stats.df[area.mean.sort$ix,c("mean","min","max")] - np.percent.df[np.area.sort$ix,c("mean","min","max")]
perc.noCWA.diff.df = area.diff.df/area.stats.df[area.mean.sort$ix,c("mean","min","max")]*100
round(area.diff.df)
round(perc.diff.df, 2)
round(perc.noCWA.diff.df, 2)
## step 8: estimate area in each protection category (Table A7)
# managed for biodiversity
bio.df = gap.stats.df[which(gap.stats.df$gap == "Managed for biodiversity"),]
bio.sort = sort(bio.df$mean, index.return=T)
bio.df[bio.sort$ix,]
round(bio.df[bio.sort$ix,c("mean","min","max")]/total.state.area.ha*100,2)
# county stormwater ordinance
cnty.df = gap.stats.df[which(gap.stats.df$gap == "County stormwater ordinance"),]
cnty.sort = sort(cnty.df$mean, index.return=T)
cnty.df[cnty.sort$ix,]
round(cnty.df[cnty.sort$ix,c("mean","min","max")]/total.state.area.ha*100,2)
# managed for multiple uses
mult.df = gap.stats.df[which(gap.stats.df$gap == "Managed for multiple uses"),]
mult.sort = sort(mult.df$mean, index.return=T)
mult.df[mult.sort$ix,]
round(mult.df[mult.sort$ix,c("mean","min","max")]/total.state.area.ha*100,2)
bio.df[bio.sort$ix,c("mean","min","max")] + cnty.df[cnty.sort$ix,c("mean","min","max")] + mult.df[mult.sort$ix,c("mean","min","max")]
## step 9: estimate area without protection based on wetland type
# remove singular empty row
gap.df = gap.df[-which(gap.df$WETLAND_TYPE == ""),]
# character vector for types
wetland.types = sort(unique(gap.df$WETLAND_TYPE))
n.t = length(wetland.types)
# add unprotected column
gap.df$Not_Protected = 1*(gap.df$Protected_Status == "Unprotected")
# estimate unprotected non-WOTUS area in each type by water regime
type.area.df = data.frame(matrix(nrow=n.t*n.w*n.p*n.b, ncol=5))
colnames(type.area.df) = c("type","water_cutoff","perm_level","buf_dist","area")
n = 1
for (i in 1:n.t) {
df.sub = gap.df[which(gap.df$WETLAND_TYPE == wetland.types[i]),]
for (j in 1:n.w) {
for (k in 1:n.p) {
for (b in 1:n.b) {
type.area.df[n,"type"] = wetland.types[i]
type.area.df[n,"water_cutoff"] = water.regimes[j]
type.area.df[n,"perm_level"] = perm.levels[k]
type.area.df[n,"buf_dist"] = buf.dists[b]
buf.ws.col = paste("Waters_Intersect", perm.abrvs[k], buf.dists[b], sep="_")
wrs = water.regimes[1:j]
wrs.inds = !(df.sub$WATER_REGI %in% wrs)
non.jurisdictional.inds = 1*(wrs.inds | (df.sub$Within_Levee == 1 | df.sub[,buf.ws.col] == 0))
non.protected.inds = df.sub$Not_Protected
type.area.df[n,"area"] = sum(df.sub[which(non.jurisdictional.inds == 1 & non.protected.inds == 1),"Area_Ha"])
n = n + 1
}
}
}
}
# summary statistics by wetland type
type.area.sum = type.area.df %>%
group_by(type, water_cutoff) %>%
summarize(mean = mean(area),
min = min(area),
max = max(area))
## step 10: summarize area estimates for Table A8
# forested
forest.df = type.area.sum[which(type.area.sum$type == "Freshwater Forested/Shrub Wetland"),]
forest.sort = sort(forest.df$mean, index.return=T)
forest.df[forest.sort$ix,]
round(forest.df[forest.sort$ix,c("mean","min","max")]/total.state.area.ha*100,2)
# emergent
emerg.df = type.area.sum[which(type.area.sum$type == "Freshwater Emergent Wetland"),]
emerg.sort = sort(emerg.df$mean, index.return=T)
emerg.df[emerg.sort$ix,]
round(emerg.df[emerg.sort$ix,c("mean","min","max")]/total.state.area.ha*100,2)
# ponts
pond.df = type.area.sum[which(type.area.sum$type == "Freshwater Pond"),]
pond.sort = sort(pond.df$mean, index.return=T)
pond.df[pond.sort$ix,]
round(pond.df[pond.sort$ix,c("mean","min","max")]/total.state.area.ha*100,2)
## step 11: gold and simmons unprotected area estimates
setwd(path_to_gitrepo)
# read in gold values
gold.gap.df = read.csv("Area_Estimates/Previous_Studies/Gold_Gap12_Area_Percent.csv")
gold.area.df = gold.gap.df[,c("wr","mean.area","min.area","max.area")]
# read in simmons values
sim.area.df = read.csv("Area_Estimates/Previous_Studies/Simmons_Gap12_Area.csv")
# combine estimates into one dataframe
study.area.df = data.frame(matrix(nrow=2*8, ncol=5))
colnames(study.area.df) = c("water_cutoff","mean","min","max","study")
study.area.df[,"water_cutoff"] = rep(rev(water.regimes), 2)
study.area.df[1:8,"study"] = "Gold (2024)"
study.area.df[9:16,"study"] = "Simmons et al. (2024)"
study.area.df[1,c("mean","min","max")] = gold.area.df[1,c("mean.area","min.area","max.area")]
study.area.df[2:8,c("mean","min","max")] = gold.area.df[,c("mean.area","min.area","max.area")]
study.area.df[9:16,c("mean","min","max")] = sim.area.df
study.area.df$gap = "Managed for biodiversity"
study.area.df[,c("mean","min","max")] = study.area.df[,c("mean","min","max")]/AcPerHa
# step 12: plot area in each gap category and vegetation type
type.lowercase = c("Freshwater emergent wetland","Freshwater forested/shrub wetland","Freshwater pond")
type.order = c("Freshwater forested/shrub wetland","Freshwater emergent wetland","Freshwater pond")
for (i in 1:3) { type.area.sum$type[which(type.area.sum$type == wetland.types[i])] = type.lowercase[i] }
gap.stats.df$water_label = rep(0, nrow(gap.stats.df))
type.area.sum$water_label = rep(0, nrow(type.area.sum))
study.area.df$water_label = rep(0, nrow(study.area.df))
for (i in 1:n.w) { gap.stats.df$water_label[which(gap.stats.df$water_cutoff == water.regimes[i])] = water.reg.labels[i] }
for (i in 1:n.w) { type.area.sum$water_label[which(type.area.sum$water_cutoff == water.regimes[i])] = water.reg.labels[i] }
for (i in 1:n.w) { study.area.df$water_label[which(study.area.df$water_cutoff == water.regimes[i])] = water.reg.labels[i] }
p1 = ggplot(gap.stats.df) +
geom_col_pattern(aes(x=mean,
y=factor(water_label, levels=water.reg.labels),
fill=factor(gap, levels=pro.order),
pattern=factor(gap, levels=pro.order)),
pattern_fill="black",
pattern_density=0.1,
pattern_spacing=0.025) +
labs(y="Wetland Flood Frequency Cutoff",
x="Mean Non-WOTUS Wetland Area (ha)",
fill="gap",pattern="gap") +
scale_x_continuous(limits=c(0,400000), labels=scales::comma) +
guides(shape=guide_legend(title="Previous Estimate of Area \nManaged for Biodiversity"),
fill=guide_legend(title="Protection Level"),
pattern=guide_legend(title="Protection Level")) +
geom_line(data=study.area.df, aes(x=mean,
y=factor(water_label, levels=water.reg.labels),
color=study,
group=study), size=0.5) +
geom_point(data=study.area.df, aes(x=mean,
y=factor(water_label, levels=water.reg.labels),
color=study,
group=study,
shape=study), size=3) +
scale_color_manual(values=c("goldenrod1","darkorange2"),
name="Previous Estimate of Area \nManaged for Biodiversity",
labels=c("Gold (2024)","Simmons et al. (2024)")) +
scale_shape_manual(values=c(16,17),
name="Previous Estimate of Area \nManaged for Biodiversity",
labels=c("Gold (2024)","Simmons et al. (2024)")) +
scale_fill_manual(values=c("darkgray","coral1","darkcyan","darkorchid")) +
scale_pattern_manual(values=c("stripe","none","crosshatch","circle")) +
theme(text = element_text(size=15),
legend.key.size = unit(0.8,'cm'))
p2 = ggplot(type.area.sum) +
geom_col_pattern(aes(x=mean,
y=factor(water_label, levels=water.reg.labels),
fill=factor(type, levels=rev(type.order)),
pattern=factor(type, levels=rev(type.order))),
pattern_fill="black",
pattern_density=0.05,
pattern_spacing=0.025,
pattern_angle=0) +
labs(y="",
x="Mean Unprotected\nNon-WOTUS Wetland Area (ha)") +
scale_x_continuous(limits=c(0,400000), labels=scales::comma) +
theme(axis.text.y=element_blank()) +
guides(fill=guide_legend(title="Wetland Type"),
pattern=guide_legend(title="Wetland Type")) +
scale_fill_manual(values=c("dodgerblue3","darkgreen","burlywood4")) +
scale_pattern_manual(values=c("stripe","none","crosshatch")) +
theme(text = element_text(size=15),
legend.key.size = unit(0.8,'cm'))
p3 = p1 + p2
ggsave("Area_Estimates/Figure2_Unprotected_Plot.jpeg",
plot = p3, width = 42, height = 14, units="cm")
path_to_gitrepo = "C:/Users/Chels/OneDrive - University of Illinois - Urbana/Illinois Wetlands Risk Assessment/Public-Repo"
setwd(path_to_gitrepo)
library(ggplot2)
library(patchwork)
# read in excel file
sum.area.df = read.csv("Summary_Figures/Figure8_AreaSummary.csv")
# remove extra rows
sum.area.df = data.frame(sum.area.df[1:3,])
colnames(sum.area.df) = rep(c("label","area"),6)
# make sep dataframes
hist.df = sum.area.df[1:3,3:4]; hist.df$group = "Historical loss"
cwa.df = sum.area.df[1:3,5:6]; cwa.df$group = "CWA coverage"
pro.df = sum.area.df[1:2,7:8]; pro.df$group = "Protection status"
veg.df = sum.area.df[1:3,9:10]; veg.df$group = "Unprotected vegetation types"
type.df = sum.area.df[1:3,11:12]; type.df$group = "Protection level"
# stack dataframe
df.stack = rbind(hist.df, cwa.df, pro.df, veg.df, type.df)
# for each group, calculate the percentage of the total
groups = c("Historical loss","CWA coverage","Protection status",
"Unprotected vegetation types","Protection level")
n.g = length(groups)
df.stack$percent = rep(0, nrow(df.stack))
df.stack$area.pos = rep(0, nrow(df.stack))
for (i in 1:n.g) {
grp.ind = which(df.stack$group == groups[i])
grp.df = df.stack[grp.ind,]
df.stack[grp.ind,"percent"] = grp.df$area/sum(grp.df$area)*100
n.a = nrow(grp.df)
rev.area = cumsum(rev(grp.df$area))
df.stack[grp.ind,"area.pos"] = rev(c(0,rev.area[1:(n.a-1)]) + 0.5*(rev.area-c(0,rev.area[1:(n.a-1)])))
}
# format percent
df.stack$percent.format = rep(0, nrow(df.stack))
for (i in 1:nrow(df.stack)) {
df.stack$percent.format[i] = paste(sprintf("%.1f", df.stack$percent[i]),"%",sep="")
}
df.stack$x = rep("center", nrow(df.stack))
# historical loss
p.hist = ggplot(df.stack[which(df.stack$group == "Historical loss"),],
aes(x=x, y=area, fill=label)) +
geom_bar(position="stack",stat="identity") +
geom_text(aes(x=x, y=area.pos, label=percent.format),
color="white", size=8, fontface="bold") +
labs(x="",y="Area ") +
geom_hline(yintercept=0,color="black") +
scale_y_continuous(name="Wetland Area (ha)",
labels=scales::comma,
breaks=c(0,397186,497764,3323284),
limits = c(0,3323284)) +
guides(fill=guide_legend(title="Time Period")) +
theme(axis.ticks.x=element_blank(),
axis.title.x=element_blank(),
text = element_text(size=26),
panel.grid = element_blank(),
panel.background = element_rect(fill = "white")) +
scale_fill_manual(values=c("coral1","coral3","coral4"))
ggsave("Summary_Figures/HistoricalLoss.png", plot = p.hist,
width=21.5, height=36, units="cm")
cwa.labels = df.stack[which(df.stack$group == "CWA coverage"),"label"]
df.cwa = df.stack[which(df.stack$group == "CWA coverage"),]
df.cwa$area.pos[1] = df.cwa$area.pos[1]-3900
p.cwa=ggplot(df.cwa,
aes(x=x, y=area,
fill=factor(label, level=cwa.labels))) +
geom_bar(position="stack",stat="identity") +
geom_text(aes(x=x, y=area.pos, label=percent.format),
color="white", size=8, fontface="bold") +
geom_hline(yintercept=0,color="black") +
scale_y_continuous(name="Wetland Area (ha)",
labels=scales::comma,
breaks=c(0,286342,397186),
limits = c(0,398000)) +
guides(fill=guide_legend(title="Jurisdictional Status at\nSeasonally Flooded Cutoff")) +
theme(axis.ticks.x=element_blank(),
axis.title.x=element_blank(),
text = element_text(size=26),
panel.grid = element_blank(),
panel.background = element_rect(fill = "white")) +
scale_fill_manual(values=c("deepskyblue","dodgerblue3","blue4"))
ggsave("Summary_Figures/CWACoverage.png", plot = p.cwa,
width=22.75, height=36, units="cm")
View(area.stats.df)
np.stats.df
